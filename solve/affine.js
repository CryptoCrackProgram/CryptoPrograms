var plain,solutions=[],cipher,numSols,uInt8Array,isRunning,additive,multiplicative,inverse,keyRange=26;function decipherAffine(){"function"===typeof importScripts&&(importScripts("../support/decipherLib.js"),importScripts("../support/cryptoPrograms.js"));initSolution();solveAffine();!1===isRunning&&self.postMessage({cmd:"STOP",msg:""})}
function solveAffine(){for(multiplicative=1;multiplicative<keyRange;multiplicative+=2)if(0<keyRange%multiplicative)for(inverse=findMultiplicativeInverse(multiplicative),additive=0;additive<keyRange;additive+=1){plain=decrypt(multiplicative,additive);var a=getTetraScore(plain);solutions[numSols-1]<a&&(solutions[numSols-1]=a,solutions.sort(function(b,c){return c-b}),self.postMessage({cmd:"reslt",inverse:inverse,additive:additive,score:a,text:plain.toLowerCase()}))}isRunning=!1}
function decrypt(a,b){var c;plain="";for(c=0;c<cipher.length;c+=1){var d=(ord(cipher[c])-ord("A")-b)*a%keyRange;0>d&&(d+=26);plain+=chr(d+ord("a"))}return plain}function findMultiplicativeInverse(a){for(var b=0,c=0;1!==a*b%keyRange&&b<keyRange;)b+=1;b<keyRange&&(c=b);return c}self.addEventListener("message",function(a){a=a.data;cipher=a.cipher;uInt8Array=a.uInt8Array;numSols=a.numSols;decipherAffine()},!1);